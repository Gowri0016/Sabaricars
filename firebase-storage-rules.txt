// Firebase Storage Security Rules for Sabari Cars Application
// Copy these rules to your Firebase Console > Storage > Rules

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // MOST PERMISSIVE RULES FOR TESTING - Allow all operations
    match /{allPaths=**} {
      allow read, write, delete: if true;
    }
  }
}

// ALTERNATIVE SECURE RULES (use after testing):
/*
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Allow read access to all files (for public vehicle images)
    match /{allPaths=**} {
      allow read: if true;
    }
    
    // Vehicle images - allow authenticated users to upload/delete
    match /vehicles/{category}/{imageId} {
      allow read: if true;
      allow write, delete: if request.auth != null;
    }
    
    // Alternative path for vehicle images
    match /vehicleImages/{imageId} {
      allow read: if true;
      allow write, delete: if request.auth != null;
    }
    
    // Category images
    match /categories/{imageId} {
      allow read: if true;
      allow write, delete: if request.auth != null;
    }
    
    // Admin uploads
    match /admin/{allPaths=**} {
      allow read, write, delete: if request.auth != null;
    }
    
    // Temporary uploads
    match /temp/{allPaths=**} {
      allow read, write, delete: if request.auth != null;
    }
  }
}
*/

// INSTRUCTIONS:
// 1. Go to Firebase Console (https://console.firebase.google.com/)
// 2. Select your project (sabari-cars)
// 3. Go to Storage > Rules
// 4. Replace the existing rules with the rules above
// 5. Click "Publish" to save the changes

// EXPLANATION:
// - Public read access for all files (vehicle images need to be publicly viewable)
// - Authenticated write/delete access for vehicle and category management
// - Supports multiple path structures for flexibility
// - Allows admin operations for authenticated users
